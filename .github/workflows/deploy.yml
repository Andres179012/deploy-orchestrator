name: Deploy Astro Project

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: "Nombre del repositorio a desplegar"
        required: true
      repo_owner:
        description: "Propietario del repositorio (usuario u organización)"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código del repositorio
        uses: actions/checkout@v4

      - name: Definir variable de entorno en minúsculas
        run: echo "GITHUB_REPO_NAME=$(echo ${{ github.event.inputs.repo_name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Instalar dependencias y construir el proyecto
        run: |
          cd ${{ github.event.inputs.repo_name }}
          
          # Eliminar Netlify si aún existe
          npm uninstall @astrojs/netlify || true
          
          # Instalar dependencias con Node.js como adaptador
          npm install @astrojs/node@latest --save-dev --legacy-peer-deps
          
          # Construir Astro
          npm run build

      - name: Crear y subir imagen Docker
        run: |
          cd ${{ github.event.inputs.repo_name }}
          docker build -t registry.digitalocean.com/cosmly-registry/${{ env.GITHUB_REPO_NAME }}:latest .
          docker push registry.digitalocean.com/cosmly-registry/${{ env.GITHUB_REPO_NAME }}:latest

      - name: Configurar kubectl
        run: doctl kubernetes cluster kubeconfig save k8s-1-32-1-do-0-nyc1-1740853375666

      - name: Crear `deployment.yaml`
        run: |
          cd ${{ github.event.inputs.repo_name }}
          mkdir -p k8s
          cat > k8s/deployment.yaml <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${{ env.GITHUB_REPO_NAME }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: ${{ env.GITHUB_REPO_NAME }}
            template:
              metadata:
                labels:
                  app: ${{ env.GITHUB_REPO_NAME }}
              spec:
                containers:
                  - name: ${{ env.GITHUB_REPO_NAME }}
                    image: registry.digitalocean.com/cosmly-registry/${{ env.GITHUB_REPO_NAME }}:latest
                    ports:
                      - containerPort: 4321
                    imagePullPolicy: Always
                    env:
                      - name: PORT
                        value: "4321"
                      - name: HOST
                        value: "0.0.0.0"
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: ${{ env.GITHUB_REPO_NAME }}-service
          spec:
            selector:
              app: ${{ env.GITHUB_REPO_NAME }}
            ports:
              - protocol: TCP
                port: 80
                targetPort: 4321
            type: LoadBalancer
          EOF

      - name: Validar deployment.yaml
        run: |
          cd ${{ github.event.inputs.repo_name }}
          kubectl apply --dry-run=client -f k8s/deployment.yaml

      - name: Desplegar en Kubernetes
        run: |
          cd ${{ github.event.inputs.repo_name }}
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout restart deployment/${{ env.GITHUB_REPO_NAME }}

      - name: Verificar estado del deployment en Kubernetes
        run: |
          sleep 10
          kubectl get pods -l app=${{ env.GITHUB_REPO_NAME }}
