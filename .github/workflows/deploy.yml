name: Deploy Astro Project

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: "Nombre del repositorio a desplegar"
        required: true
      repo_owner:
        description: "Propietario del repositorio (usuario u organización)"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código del repositorio centralizado
        uses: actions/checkout@v4

      - name: Clonar el repositorio Astro
        run: |
          git clone https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.event.inputs.repo_owner }}/${{ github.event.inputs.repo_name }}.git

      - name: Definir variable de entorno en minúsculas
        run: |
          echo "GITHUB_REPO_NAME=$(echo ${{ github.event.inputs.repo_name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Verificar estructura del directorio
        run: |
          echo "📂 Estructura del directorio después del checkout:"
          ls -la ${{ github.workspace }}

      - name: Verificar existencia de package.json y package-lock.json
        run: |
          cd ${{ github.workspace }}/${{ github.event.inputs.repo_name }}
          if [ ! -f package.json ]; then
            echo "❌ Error: No se encontró package.json en el repositorio."
            exit 1
          fi
          if [ ! -f package-lock.json ]; then
            echo "⚠️ package-lock.json no encontrado, generando uno nuevo..."
            npm install --package-lock-only --no-audit --no-fund
          fi

      - name: Instalar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Instalar dependencias
        run: |
          cd ${{ github.workspace }}/${{ github.event.inputs.repo_name }}
          npm ci || npm install
          echo "✅ Dependencias instaladas correctamente"

      - name: Build del proyecto Astro
        run: |
          cd ${{ github.workspace }}/${{ github.event.inputs.repo_name }}
          npm run build

      - name: Crear Dockerfile optimizado para Astro
        run: |
          cd ${{ github.workspace }}/${{ github.event.inputs.repo_name }}
          cat > Dockerfile <<EOF
          FROM node:20-alpine

          WORKDIR /app

          COPY package*.json ./

          RUN npm ci --omit=dev || npm install --omit=dev

          COPY . .

          RUN npm run build

          EXPOSE 4321

          CMD ["sh", "-c", "until nc -z localhost 4321; do sleep 1; done && npm run preview -- --host --port 4321"]
          EOF

      - name: Verificar instalación de doctl
        run: |
          if ! command -v doctl &> /dev/null
          then
            echo "❌ Error: 'doctl' no está instalado. Revisar configuración."
            exit 1
          fi

      - name: Iniciar sesión en DigitalOcean
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Iniciar sesión en el Container Registry
        run: doctl registry login

      - name: Construir y subir imagen Docker optimizada para Astro
        run: |
          cd ${{ github.workspace }}/${{ github.event.inputs.repo_name }}
          docker build -t registry.digitalocean.com/cosmly-registry/${GITHUB_REPO_NAME}:latest .
          docker push registry.digitalocean.com/cosmly-registry/${GITHUB_REPO_NAME}:latest

      - name: Configurar kubectl
        run: doctl kubernetes cluster kubeconfig save k8s-1-32-1-do-0-nyc1-1740853375666

      - name: Crear archivo deployment.yaml optimizado para Astro
        run: |
          cd ${{ github.workspace }}/${{ github.event.inputs.repo_name }}
          mkdir -p k8s
          cat > k8s/deployment.yaml <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${GITHUB_REPO_NAME}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: ${GITHUB_REPO_NAME}
            template:
              metadata:
                labels:
                  app: ${GITHUB_REPO_NAME}
              spec:
                containers:
                  - name: ${GITHUB_REPO_NAME}
                    image: registry.digitalocean.com/cosmly-registry/${GITHUB_REPO_NAME}:latest
                    ports:
                      - containerPort: 4321
                    imagePullPolicy: Always
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: ${GITHUB_REPO_NAME}-service
          spec:
            selector:
              app: ${GITHUB_REPO_NAME}
            ports:
              - protocol: TCP
                port: 80
                targetPort: 4321
            type: LoadBalancer
          EOF

      - name: Validar deployment.yaml
        run: |
          cd ${{ github.workspace }}/${{ github.event.inputs.repo_name }}
          kubectl apply --dry-run=client -f k8s/deployment.yaml

      - name: Desplegar en Kubernetes
        run: |
          cd ${{ github.workspace }}/${{ github.event.inputs.repo_name }}
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout restart deployment/${GITHUB_REPO_NAME}

      - name: Verificar estado del deployment en Kubernetes
        run: |
          sleep 10
          kubectl get pods -l app=${GITHUB_REPO_NAME}
