name: Deploy Any Repository

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: "Nombre del repositorio a desplegar"
        required: true
      repo_owner:
        description: "Propietario del repositorio (usuario u organización)"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código del repositorio centralizado
        uses: actions/checkout@v4

      - name: Clonar el repositorio a desplegar
        run: |
          git clone https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.event.inputs.repo_owner }}/${{ github.event.inputs.repo_name }}.git

      - name: Definir variable de entorno en minúsculas
        run: |
          echo "GITHUB_REPO_NAME=$(echo ${{ github.event.inputs.repo_name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Detectar tipo de proyecto
        id: detect-project
        run: |
          cd ${{ github.event.inputs.repo_name }}
          if [ -f "package.json" ]; then
            if grep -q '"astro"' package.json; then
              echo "Proyecto detectado: Astro"
              echo "PROJECT_TYPE=astro" >> $GITHUB_ENV
            elif grep -q '"next"' package.json; then
              echo "Proyecto detectado: Next.js"
              echo "PROJECT_TYPE=next" >> $GITHUB_ENV
            elif grep -q '"react-scripts"' package.json; then
              echo "Proyecto detectado: React"
              echo "PROJECT_TYPE=react" >> $GITHUB_ENV
            elif grep -q '"@angular/core"' package.json; then
              echo "Proyecto detectado: Angular"
              echo "PROJECT_TYPE=angular" >> $GITHUB_ENV
            else
              echo "Proyecto Node.js no compatible detectado"
              exit 1
            fi
          elif [ -f "requirements.txt" ]; then
            echo "Proyecto detectado: Python (Flask)"
            echo "PROJECT_TYPE=flask" >> $GITHUB_ENV
          else
            echo "No se encontró un tipo de proyecto compatible"
            exit 1
          fi

      - name: Limpiar y reinstalar dependencias
        run: |
          cd ${{ github.event.inputs.repo_name }}
          case $PROJECT_TYPE in
            astro|next|react|angular)
              rm -rf node_modules package-lock.json
              npm install --legacy-peer-deps
              ;;
            flask)
              pip install -r requirements.txt
              ;;
            *)
              echo "Tipo de proyecto no compatible"
              exit 1
              ;;
          esac

      - name: Configurar proyecto según tipo
        run: |
          cd ${{ github.event.inputs.repo_name }}
          case $PROJECT_TYPE in
            astro)
              echo "Configurando proyecto Astro..."
              npm install @astrojs/node@4 --save-dev --legacy-peer-deps
              cat <<'EOF' > fix-astro-config.js
              const fs = require('fs');
              const filePath = './astro.config.mjs';

              if (!fs.existsSync(filePath)) {
                console.log('❌ No se encontró astro.config.mjs');
                process.exit(0);
              }

              let content = fs.readFileSync(filePath, 'utf8');

              if (!content.includes("import { defineConfig } from 'astro/config';")) {
                content = "import { defineConfig } from 'astro/config';\n" + content;
              }
              if (!content.includes("import node from '@astrojs/node';")) {
                content = "import node from '@astrojs/node';\n" + content;
              }

              content = content.replace(/import netlify.*\n?/g, '');
              content = content.replace(/adapter:\s*netlify\(.*?\),?/gs, '');

              const astroConfig = \`
              import { defineConfig } from 'astro/config';
              import node from '@astrojs/node';

              export default defineConfig({
                output: 'server',
                adapter: node({
                  mode: 'middleware',
                }),
                server: {
                  host: true,
                  port: 4321
                }
              });
              \`;

              fs.writeFileSync(filePath, astroConfig.trim(), 'utf8');
              console.log('✅ astro.config.mjs actualizado correctamente');
              EOF
              node fix-astro-config.js
              ;;
            next|react|angular|flask)
              echo "No se requiere configuración adicional para $PROJECT_TYPE"
              ;;
            *)
              echo "Tipo de proyecto no compatible"
              exit 1
              ;;
          esac

      - name: Build del proyecto
        run: |
          cd ${{ github.event.inputs.repo_name }}
          case $PROJECT_TYPE in
            astro|next|react)
              npm run build
              ;;
            angular)
              npm run build -- --prod
              ;;
            flask)
              echo "No se requiere build para Flask"
              ;;
            *)
              echo "Tipo de proyecto no compatible"
              exit 1
              ;;
          esac

      - name: Crear Dockerfile
        run: |
          cd ${{ github.event.inputs.repo_name }}
          case $PROJECT_TYPE in
            astro)
              cat <<'EOF' > Dockerfile
              FROM node:18-alpine
              WORKDIR /app
              COPY package*.json ./  
              RUN npm install --legacy-peer-deps
              COPY . .
              RUN npm run build
              EXPOSE 4321
              CMD ["sh", "-c", "npm run preview -- --host 0.0.0.0 --port 4321"]
              EOF
              ;;
            next|react)
              cat <<'EOF' > Dockerfile
              FROM node:18-alpine
              WORKDIR /app
              COPY package*.json ./  
              RUN npm install --legacy-peer-deps
              COPY . .
              RUN npm run build
              EXPOSE 3000
              CMD ["npm", "start"]
              EOF
              ;;
            angular)
              cat <<'EOF' > Dockerfile
              FROM node:18-alpine
              WORKDIR /app
              COPY package*.json ./  
              RUN npm install --legacy-peer-deps
              COPY . .
              RUN npm run build -- --prod
              EXPOSE 80
              CMD ["npm", "start"]
              EOF
              ;;
            flask)
              cat <<'EOF' > Dockerfile
              FROM python:3.9-slim
              WORKDIR /app
              COPY requirements.txt .
              RUN pip install -r requirements.txt
              COPY . .
              CMD ["python", "app.py"]
              EOF
              ;;
            *)
              echo "Tipo de proyecto no compatible"
              exit 1
              ;;
          esac

      - name: Crear archivo deployment.yaml
        run: |
          cd ${{ github.event.inputs.repo_name }}
          mkdir -p k8s
          case $PROJECT_TYPE in
            astro)
              PORT=4321
              ;;
            next|react)
              PORT=3000
              ;;
            angular)
              PORT=80
              ;;
            flask)
              PORT=5000
              ;;
            *)
              echo "Tipo de proyecto no compatible"
              exit 1
              ;;
          esac
          cat <<'EOF' > k8s/deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${GITHUB_REPO_NAME}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: ${GITHUB_REPO_NAME}
            template:
              metadata:
                labels:
                  app: ${GITHUB_REPO_NAME}
              spec:
                containers:
                  - name: ${GITHUB_REPO_NAME}
                    image: registry.digitalocean.com/cosmly-registry/${GITHUB_REPO_NAME}:latest
                    ports:
                      - containerPort: ${PORT}
                    imagePullPolicy: Always
                    env:
                      - name: PORT
                        value: "${PORT}"
                      - name: HOST
                        value: "0.0.0.0"
          --- 
          apiVersion: v1
          kind: Service
          metadata:
            name: ${GITHUB_REPO_NAME}-service
          spec:
            selector:
              app: ${GITHUB_REPO_NAME}
            ports:
              - protocol: TCP
                port: 80
                targetPort: ${PORT}
            type: LoadBalancer
          EOF

      - name: Iniciar sesión en DigitalOcean
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Iniciar sesión en el Container Registry
        run: doctl registry login

      - name: Construir y subir imagen Docker
        run: |
          cd ${{ github.event.inputs.repo_name }}
          docker build -t registry.digitalocean.com/cosmly-registry/${GITHUB_REPO_NAME}:latest .
          docker push registry.digitalocean.com/cosmly-registry/${GITHUB_REPO_NAME}:latest

      - name: Configurar kubectl
        run: doctl kubernetes cluster kubeconfig save k8s-1-32-1-do-0-nyc1-1740853375666

      - name: Validar deployment.yaml
        run: |
          cd ${{ github.event.inputs.repo_name }}
          kubectl apply --dry-run=client -f k8s/deployment.yaml

      - name: Desplegar en Kubernetes
        run: |
          cd ${{ github.event.inputs.repo_name }}
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout restart deployment/${GITHUB_REPO_NAME}