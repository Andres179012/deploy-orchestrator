name: Deploy Any Repository

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: "Nombre del repositorio a desplegar"
        required: true
      repo_owner:
        description: "Propietario del repositorio (usuario u organizaci√≥n)"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout del repositorio centralizado
      - name: Checkout c√≥digo del repositorio centralizado
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Clonar el repositorio a desplegar
      - name: Clonar el repositorio a desplegar
        run: |
          git clone https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.event.inputs.repo_owner }}/${{ github.event.inputs.repo_name }}.git

      # 3Ô∏è‚É£ Definir variable de entorno en min√∫sculas
      - name: Definir variable de entorno en min√∫sculas
        run: |
          echo "GITHUB_REPO_NAME=$(echo ${{ github.event.inputs.repo_name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # 4Ô∏è‚É£ Detectar el framework y crear Dockerfile din√°micamente
      - name: Detectar framework y configurar Astro
        run: |
          cd ${{ github.event.inputs.repo_name }}

          PORT=3000
          START_CMD="npm run start"

          # Detectar el framework seg√∫n package.json
          if grep -q '"vite"' package.json; then
            PORT=4173
            START_CMD="npm run preview -- --host"
          elif grep -q '"next"' package.json; then
            PORT=3000
            START_CMD="npm run start"
          elif grep -q '"astro"' package.json; then
            PORT=4321
            START_CMD="npm run preview -- --host"

            # üî• 1Ô∏è‚É£ Eliminar Netlify sin romper la sintaxis de Astro
            if grep -q '@astrojs/netlify' astro.config.mjs; then
              echo "üöÄ Eliminando Netlify del archivo de configuraci√≥n..."
              sed -i '/import netlify/d' astro.config.mjs
              sed -i '/adapter: netlify(/, /)/d' astro.config.mjs
              sed -i '/adapter: netlify/d' astro.config.mjs
              echo "‚úÖ Netlify eliminado correctamente"
            fi

            # üî• 2Ô∏è‚É£ Si `output: 'server'` est√° presente, asegurarse de que tenga un adaptador
            if grep -q "output: 'server'" astro.config.mjs; then
              if ! grep -q '@astrojs/node' astro.config.mjs; then
                echo "üöÄ Instalando adaptador de Node.js..."
                npm install @astrojs/node --save-dev

                echo "üöÄ Configurando adaptador de Node.js en Astro..."
                sed -i '1 i\import node from "@astrojs/node";' astro.config.mjs
                sed -i '/defineConfig({/a\  adapter: node(),' astro.config.mjs
                echo "‚úÖ Adaptador de Node.js agregado correctamente"
              fi
            fi

            # üîß 3Ô∏è‚É£ Revisar si queda una coma extra despu√©s de eliminar Netlify
            sed -i ':a;N;$!ba;s/integrations: \[\([^]]*\),\s*\]/integrations: [\1]/' astro.config.mjs

            # üî• 4Ô∏è‚É£ Corregir posibles errores de sintaxis
            if grep -q '  )});' astro.config.mjs; then
              echo "‚ö†Ô∏è Corrigiendo sintaxis en astro.config.mjs..."
              sed -i 's/^  )});/  });/' astro.config.mjs
              echo "‚úÖ Sintaxis corregida"
            fi
          fi

          echo "üîç Framework detectado: $START_CMD con puerto: $PORT"

          # üöÄ 5Ô∏è‚É£ Forzar instalaci√≥n de dependencias antes del build
          echo "üöÄ Instalando todas las dependencias antes del build..."
          npm install --legacy-peer-deps

          # Crear Dockerfile
          cat <<EOF > Dockerfile
          FROM node:18-alpine
          WORKDIR /app
          COPY package*.json ./  
          RUN npm install --legacy-peer-deps
          COPY . .
          RUN npm run build || echo 'No se necesita build'
          EXPOSE $PORT
          CMD ["sh", "-c", "$START_CMD"]
          EOF

          echo "PORT=$PORT" >> $GITHUB_ENV

      # 5Ô∏è‚É£ Crear archivo deployment.yaml
      - name: Crear archivo deployment.yaml
        run: |
          cd ${{ github.event.inputs.repo_name }}
          mkdir -p k8s
          cat <<EOF > k8s/deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${GITHUB_REPO_NAME}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: ${GITHUB_REPO_NAME}
            template:
              metadata:
                labels:
                  app: ${GITHUB_REPO_NAME}
              spec:
                containers:
                  - name: ${GITHUB_REPO_NAME}
                    image: registry.digitalocean.com/cosmly-registry/${GITHUB_REPO_NAME}:latest
                    ports:
                      - containerPort: ${PORT}
                    imagePullPolicy: Always
                    env:
                      - name: PORT
                        value: "${PORT}"
          --- 
          apiVersion: v1
          kind: Service
          metadata:
            name: ${GITHUB_REPO_NAME}-service
          spec:
            selector:
              app: ${GITHUB_REPO_NAME}
            ports:
              - protocol: TCP
                port: 80
                targetPort: ${PORT}
            type: LoadBalancer
          EOF

      # 6Ô∏è‚É£ Iniciar sesi√≥n en DigitalOcean
      - name: Iniciar sesi√≥n en DigitalOcean
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      # 7Ô∏è‚É£ Iniciar sesi√≥n en el Container Registry
      - name: Iniciar sesi√≥n en el Container Registry
        run: doctl registry login

      # 8Ô∏è‚É£ Construir y subir imagen Docker
      - name: Construir y subir imagen Docker
        run: |
          cd ${{ github.event.inputs.repo_name }}
          docker build -t registry.digitalocean.com/cosmly-registry/${GITHUB_REPO_NAME}:latest .
          docker push registry.digitalocean.com/cosmly-registry/${GITHUB_REPO_NAME}:latest

      # 9Ô∏è‚É£ Configurar kubectl
      - name: Configurar kubectl
        run: doctl kubernetes cluster kubeconfig save k8s-1-32-1-do-0-nyc1-1740853375666

      # üîü Validar YAML antes de desplegar
      - name: Validar deployment.yaml
        run: |
          cd ${{ github.event.inputs.repo_name }}
          kubectl apply --dry-run=client -f k8s/deployment.yaml

      # 1Ô∏è‚É£1Ô∏è‚É£ Desplegar en Kubernetes
      - name: Desplegar en Kubernetes
        run: |
          cd ${{ github.event.inputs.repo_name }}
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout restart deployment/${GITHUB_REPO_NAME}
