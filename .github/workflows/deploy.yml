name: Deploy Any Repository

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: 'Nombre del repositorio a desplegar'
        required: true
      repo_owner:
        description: 'Propietario del repositorio (usuario u organización)'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout del repositorio centralizado (deploy-orchestrator)
      - name: Checkout código del repositorio centralizado
        uses: actions/checkout@v4

      # 2️⃣ Clonar el repositorio a desplegar
      - name: Clonar el repositorio a desplegar
        run: |
          git clone https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.event.inputs.repo_owner }}/${{ github.event.inputs.repo_name }}.git
          cd ${{ github.event.inputs.repo_name }}

      # 3️⃣ Crear un Dockerfile dinámicamente si no existe
            # 3️⃣ Crear un Dockerfile dinámicamente si no existe
      - name: Crear Dockerfile dinámicamente
        run: |
          if [ ! -f "Dockerfile" ]; then
            cat <<EOF > Dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD ["npm", "start"]
EOF
          fi

      # 4️⃣ Crear el archivo k8s/deployment.yaml dinámicamente
      - name: Crear archivo deployment.yaml
        run: |
          mkdir -p k8s
          cat <<EOF > k8s/deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${{ github.event.inputs.repo_name }}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: ${{ github.event.inputs.repo_name }}
            template:
              metadata:
                labels:
                  app: ${{ github.event.inputs.repo_name }}
              spec:
                containers:
                  - name: ${{ github.event.inputs.repo_name }}
                    image: registry.digitalocean.com/cosmly-registry/$(echo ${{ github.event.inputs.repo_name }} | tr '[:upper:]' '[:lower:]'):latest
                    ports:
                      - containerPort: 3000
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: ${{ github.event.inputs.repo_name }}-service
          spec:
            selector:
              app: ${{ github.event.inputs.repo_name }}
            ports:
              - protocol: TCP
                port: 80
                targetPort: 3000
            type: LoadBalancer
          EOF

      # 5️⃣ Iniciar sesión en DigitalOcean
      - name: Iniciar sesión en DigitalOcean
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      # 6️⃣ Iniciar sesión en el Container Registry de DigitalOcean
      - name: Iniciar sesión en el Container Registry
        run: doctl registry login

      # 7️⃣ Construir y subir la imagen Docker
      - name: Construir y subir imagen Docker
        run: |
          cd ${{ github.event.inputs.repo_name }}
          REPO_NAME_LOWER=$(echo ${{ github.event.inputs.repo_name }} | tr '[:upper:]' '[:lower:]')
          docker build -t registry.digitalocean.com/cosmly-registry/$REPO_NAME_LOWER:latest .
          docker push registry.digitalocean.com/cosmly-registry/$REPO_NAME_LOWER:latest

      # 8️⃣ Configurar kubectl para acceder al clúster de Kubernetes
      - name: Configurar kubectl
        run: doctl kubernetes cluster kubeconfig save my-cluster

      # 9️⃣ Desplegar en Kubernetes
      - name: Desplegar en Kubernetes
        run: |
          cd ${{ github.event.inputs.repo_name }}
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout restart deployment/${{ github.event.inputs.repo_name }}