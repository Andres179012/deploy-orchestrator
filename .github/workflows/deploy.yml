name: Deploy Any Repository

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: "Nombre del repositorio a desplegar"
        required: true
      repo_owner:
        description: "Propietario del repositorio (usuario u organizaci√≥n)"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout del repositorio centralizado
      - name: Checkout c√≥digo del repositorio centralizado
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Clonar el repositorio a desplegar
      - name: Clonar el repositorio a desplegar
        run: |
          git clone https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.event.inputs.repo_owner }}/${{ github.event.inputs.repo_name }}.git

      # 3Ô∏è‚É£ Definir variable de entorno en min√∫sculas
      - name: Definir variable de entorno en min√∫sculas
        run: |
          echo "GITHUB_REPO_NAME=$(echo ${{ github.event.inputs.repo_name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

     # 4Ô∏è‚É£ Detectar el framework y crear Dockerfile din√°micamente
      - name: Detectar framework y crear Dockerfile din√°micamente
        run: |
          cd ${{ github.event.inputs.repo_name }}

          PORT=3000
          START_CMD="npm run start"

          # Detectar el framework seg√∫n package.json
          if grep -q '"vite"' package.json; then
            PORT=4173
            if grep -q '"preview"' package.json; then
              START_CMD="npm run preview -- --host"
            else
              START_CMD="npm run dev -- --host"
            fi
          elif grep -q '"next"' package.json; then
            START_CMD="npm run start"
            PORT=3000
          elif grep -q '"astro"' package.json; then
            START_CMD="npm run preview -- --host"
            PORT=4321

            # üî• Reemplazar el adaptador de Netlify por Node si est√° presente
            if grep -q '@astrojs/netlify' astro.config.mjs; then
              echo "üöÄ Detectado adaptador Netlify en Astro. Reemplazando con Node.js..."
              sed -i 's/import netlify.*/import node from "@astrojs\/node";/' astro.config.mjs
              sed -i 's/adapter: netlify.*/adapter: node(),/' astro.config.mjs
              echo "‚úÖ Adaptador cambiado a Node.js en astro.config.mjs"
            fi

            # üî• Corregir posibles errores de sintaxis en astro.config.mjs
            if grep -q '  )});' astro.config.mjs; then
              echo "‚ö†Ô∏è Se detect√≥ un posible error de sintaxis en astro.config.mjs. Corrigi√©ndolo..."
              sed -i 's/^  )});/  });/' astro.config.mjs
              echo "‚úÖ Sintaxis corregida en astro.config.mjs"
            fi
          fi

          echo "üîç Detectado framework con comando: $START_CMD y puerto: $PORT"

          # Crear el Dockerfile usando echo l√≠nea por l√≠nea
          echo "FROM node:18-alpine" > Dockerfile
          echo "WORKDIR /app" >> Dockerfile
          echo "COPY package*.json ./" >> Dockerfile
          echo "RUN npm install --legacy-peer-deps" >> Dockerfile
          echo "COPY . ." >> Dockerfile
          echo "RUN npm run build || echo 'No se necesita build'" >> Dockerfile
          echo "EXPOSE $PORT" >> Dockerfile
          echo "CMD [\"sh\", \"-c\", \"$START_CMD\"]" >> Dockerfile

          echo "PORT=$PORT" >> $GITHUB_ENV

            run: |
              cd ${{ github.event.inputs.repo_name }}

              PORT=3000
              START_CMD="npm run start"

              # Detectar el framework seg√∫n package.json
              if grep -q '"vite"' package.json; then
                PORT=4173
                if grep -q '"preview"' package.json; then
                  START_CMD="npm run preview -- --host"
                else
                  START_CMD="npm run dev -- --host"
                fi
              elif grep -q '"next"' package.json; then
                START_CMD="npm run start"
                PORT=3000
              elif grep -q '"astro"' package.json; then
                START_CMD="npm run preview -- --host"
                PORT=4321

                # üî• Reemplazar el adaptador de Netlify por Node si est√° presente
                if grep -q '@astrojs/netlify' astro.config.*; then
                  echo "Detectado adaptador Netlify en Astro. Reemplazando con Node..."
                  sed -i 's/import netlify.*/import node from "@astrojs\/node";/' astro.config.*
                  sed -i 's/adapter: netlify.*/adapter: node(),/' astro.config.*
                fi

                # üî• Corregir posibles errores en astro.config.mjs
                echo "Verificando sintaxis de astro.config.mjs..."
                sed -i 's/^  )});/  });/' astro.config.*
              fi

              echo "Detectado framework con comando: $START_CMD y puerto: $PORT"

              # Crear el Dockerfile usando echo l√≠nea por l√≠nea
              echo "FROM node:18-alpine" > Dockerfile
              echo "WORKDIR /app" >> Dockerfile
              echo "COPY package*.json ./" >> Dockerfile
              echo "RUN npm install --legacy-peer-deps" >> Dockerfile
              echo "COPY . ." >> Dockerfile
              echo "RUN npm run build || echo 'No se necesita build'" >> Dockerfile
              echo "EXPOSE $PORT" >> Dockerfile
              echo "CMD [\"sh\", \"-c\", \"$START_CMD\"]" >> Dockerfile

              echo "PORT=$PORT" >> $GITHUB_ENV


      # 5Ô∏è‚É£ Crear el archivo k8s/deployment.yaml din√°micamente con nombres en min√∫sculas
      - name: Crear archivo deployment.yaml
        run: |
          cd ${{ github.event.inputs.repo_name }}
          mkdir -p k8s
          printf "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ${GITHUB_REPO_NAME}\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: ${GITHUB_REPO_NAME}\n  template:\n    metadata:\n      labels:\n        app: ${GITHUB_REPO_NAME}\n    spec:\n      containers:\n        - name: ${GITHUB_REPO_NAME}\n          image: registry.digitalocean.com/cosmly-registry/${GITHUB_REPO_NAME}:latest\n          ports:\n            - containerPort: ${PORT}\n          imagePullPolicy: Always\n          env:\n            - name: PORT\n              value: \"${PORT}\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: ${GITHUB_REPO_NAME}-service\nspec:\n  selector:\n    app: ${GITHUB_REPO_NAME}\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: ${PORT}\n  type: LoadBalancer\n" > k8s/deployment.yaml

      # 6Ô∏è‚É£ Iniciar sesi√≥n en DigitalOcean
      - name: Iniciar sesi√≥n en DigitalOcean
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      # 7Ô∏è‚É£ Iniciar sesi√≥n en el Container Registry de DigitalOcean
      - name: Iniciar sesi√≥n en el Container Registry
        run: doctl registry login

      # 8Ô∏è‚É£ Construir y subir la imagen Docker con nombre en min√∫sculas
      - name: Construir y subir imagen Docker
        run: |
          cd ${{ github.event.inputs.repo_name }}
          docker build -t registry.digitalocean.com/cosmly-registry/${GITHUB_REPO_NAME}:latest .
          docker push registry.digitalocean.com/cosmly-registry/${GITHUB_REPO_NAME}:latest

      # 9Ô∏è‚É£ Configurar kubectl para acceder al cl√∫ster de Kubernetes
      - name: Configurar kubectl
        run: doctl kubernetes cluster kubeconfig save k8s-1-32-1-do-0-nyc1-1740853375666

      # üîü Validar YAML antes de desplegar
      - name: Validar deployment.yaml
        run: |
          cd ${{ github.event.inputs.repo_name }}
          kubectl apply --dry-run=client -f k8s/deployment.yaml

      # 1Ô∏è‚É£1Ô∏è‚É£ Desplegar en Kubernetes
      - name: Desplegar en Kubernetes
        run: |
          cd ${{ github.event.inputs.repo_name }}
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout restart deployment/${GITHUB_REPO_NAME}
