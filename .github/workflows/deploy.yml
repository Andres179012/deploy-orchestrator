name: Deploy Any Repository

on:
  workflow_dispatch:
    inputs:
      repo_name:
        description: "Nombre del repositorio a desplegar"
        required: true
      repo_owner:
        description: "Propietario del repositorio (usuario u organizaci√≥n)"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo del repositorio centralizado
        uses: actions/checkout@v4

      - name: Clonar el repositorio a desplegar
        run: |
          git clone https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.event.inputs.repo_owner }}/${{ github.event.inputs.repo_name }}.git

      - name: Definir variable de entorno en min√∫sculas
        run: |
          echo "GITHUB_REPO_NAME=$(echo ${{ github.event.inputs.repo_name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # üî• Limpiar e instalar dependencias correctamente
      - name: Limpiar y reinstalar dependencias
        run: |
          cd ${{ github.event.inputs.repo_name }}
          rm -rf node_modules package-lock.json
          npm install --legacy-peer-deps

      # üî• Detectar la versi√≥n de Astro y asegurar la versi√≥n correcta de @astrojs/node
      - name: Instalar versi√≥n compatible de `@astrojs/node`
        run: |
          cd ${{ github.event.inputs.repo_name }}
          ASTRO_VERSION=$(node -p "require('./package.json').dependencies?.astro || require('./package.json').devDependencies?.astro || ''")

          if [[ "$ASTRO_VERSION" =~ ^3 ]]; then
            npm install @astrojs/node@4 --save-dev --legacy-peer-deps
          elif [[ "$ASTRO_VERSION" =~ ^4 ]]; then
            npm install @astrojs/node@8 --save-dev --legacy-peer-deps
          elif [[ "$ASTRO_VERSION" =~ ^5 ]]; then
            npm install @astrojs/node@9 --save-dev --legacy-peer-deps
          else
            npm install @astrojs/node --save-dev --legacy-peer-deps
          fi

      # üî• Crear script para corregir astro.config.mjs
      - name: Crear script para corregir astro.config.mjs
        run: |
          cat <<EOF > fix-astro-config.js
          const fs = require('fs');
          const filePath = './astro.config.mjs';

          if (!fs.existsSync(filePath)) {
            console.log('‚ùå No se encontr√≥ astro.config.mjs');
            process.exit(0);
          }

          let content = fs.readFileSync(filePath, 'utf8');

          if (!content.includes("import { defineConfig } from 'astro/config';")) {
            content = "import { defineConfig } from 'astro/config';\n" + content;
          }
          if (!content.includes("import node from '@astrojs/node';")) {
            content = "import node from '@astrojs/node';\n" + content;
          }

          content = content.replace(/import netlify.*\n?/g, '');
          content = content.replace(/adapter:\s*netlify\(.*?\),?/gs, '');

          const astroConfig = \`
          import { defineConfig } from 'astro/config';
          import node from '@astrojs/node';

          export default defineConfig({
            output: 'server',
            adapter: node({ mode: 'middleware' }),
            image: {
              endpoint: '_image',
              service: {
                entrypoint: 'astro/assets/services/squoosh',
              },
            },
          });
          \`;

          fs.writeFileSync(filePath, astroConfig.trim(), 'utf8');
          console.log('‚úÖ astro.config.mjs actualizado correctamente');
          EOF


      # üî• Ejecutar script de correcci√≥n antes del build
      - name: Corregir Astro antes del build
        run: |
          cd ${{ github.event.inputs.repo_name }}
          node ../fix-astro-config.js

      # üî• Construir el proyecto Astro
      - name: Build Astro project
        run: |
          cd ${{ github.event.inputs.repo_name }}
          npm run build

      # üî• Crear Dockerfile asegurando build antes de ejecutar preview
      - name: Crear Dockerfile
        run: |
          cd ${{ github.event.inputs.repo_name }}
          cat <<EOF > Dockerfile
          FROM node:18-alpine
          WORKDIR /app
          COPY package*.json ./  
          RUN npm install --legacy-peer-deps
          COPY . .
          RUN npm run build
          EXPOSE 4321
          CMD ["sh", "-c", "npm run preview -- --host"]
          EOF

      - name: Crear archivo deployment.yaml
        run: |
          cd ${{ github.event.inputs.repo_name }}
          mkdir -p k8s
          cat <<EOF > k8s/deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${GITHUB_REPO_NAME}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: ${GITHUB_REPO_NAME}
            template:
              metadata:
                labels:
                  app: ${GITHUB_REPO_NAME}
              spec:
                containers:
                  - name: ${GITHUB_REPO_NAME}
                    image: registry.digitalocean.com/cosmly-registry/${GITHUB_REPO_NAME}:latest
                    ports:
                      - containerPort: 4321
                    imagePullPolicy: Always
                    env:
                      - name: PORT
                        value: "4321"
          --- 
          apiVersion: v1
          kind: Service
          metadata:
            name: ${GITHUB_REPO_NAME}-service
          spec:
            selector:
              app: ${GITHUB_REPO_NAME}
            ports:
              - protocol: TCP
                port: 80
                targetPort: 4321
            type: LoadBalancer
          EOF

      - name: Iniciar sesi√≥n en DigitalOcean
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Iniciar sesi√≥n en el Container Registry
        run: doctl registry login

      - name: Construir y subir imagen Docker
        run: |
          cd ${{ github.event.inputs.repo_name }}
          docker build -t registry.digitalocean.com/cosmly-registry/${GITHUB_REPO_NAME}:latest .
          docker push registry.digitalocean.com/cosmly-registry/${GITHUB_REPO_NAME}:latest

      - name: Configurar kubectl
        run: doctl kubernetes cluster kubeconfig save k8s-1-32-1-do-0-nyc1-1740853375666

      - name: Validar deployment.yaml
        run: |
          cd ${{ github.event.inputs.repo_name }}
          kubectl apply --dry-run=client -f k8s/deployment.yaml

      - name: Desplegar en Kubernetes
        run: |
          cd ${{ github.event.inputs.repo_name }}
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout restart deployment/${GITHUB_REPO_NAME}
